!function(e){var n={};function o(t){if(n[t])return n[t].exports;var l=n[t]={i:t,l:!1,exports:{}};return e[t].call(l.exports,l,l.exports,o),l.l=!0,l.exports}o.m=e,o.c=n,o.d=function(e,n,t){o.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,n){if(1&n&&(e=o(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var l in e)o.d(t,l,function(n){return e[n]}.bind(null,l));return t},o.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(n,"a",n),n},o.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},o.p="",o(o.s=0)}([function(e,n,o){"use strict";angular.module("angularModalService",[]).provider("ModalService",function(){var e={closeDelay:0};this.configureOptions=function(n){angular.extend(e,n)},this.$get=["$animate","$document","$compile","$controller","$http","$rootScope","$q","$templateRequest","$timeout",function(n,o,t,l,r,c,a,s,u){return new function(e){var r=this;r.configOptions=e,r.openModals=[],r.closeModals=function(e,n){for(n=n||r.configOptions.closeDelay;r.openModals.length;)r.openModals[0].close(e,n),r.openModals.splice(0,1)},r.showModal=function(e){var i=angular.element(o[0].body),p=a.defer();return e.controller?(function(e,n){var o=a.defer();return e?o.resolve(e):n?s(n,!0).then(function(e){o.resolve(e)},function(e){o.reject(e)}):o.reject("No template or templateUrl has been specified."),o.promise}(e.template,e.templateUrl).then(function(s){var f={},d=(e.scope||c).$new(),m=null,v=e.locationChangeSuccess;!1===v?m=angular.noop:angular.isNumber(v)&&v>=0?u(function(){m=c.$on("$locationChangeSuccess",j)},v):u(function(){m=c.$on("$locationChangeSuccess",j)},r.configOptions.closeDelay);var g=a.defer(),y=a.defer(),b=!1,h={$scope:d,close:function(n,o){o=o||r.configOptions.closeDelay,"function"==typeof e.preClose&&e.preClose(f,n,o),void 0!==o&&null!==o||(o=0),b||(b=!0,u(function(){j(n)},o))}};e.inputs&&angular.extend(h,e.inputs);var $=t(s)(d);h.$element=$;var M=d[e.controllerAs],S=l(e.controller,h,!1,e.controllerAs);e.controllerAs&&M&&angular.extend(S,M);var O=i;function j(o){g.resolve(o),e.bodyClass&&i[0].classList.remove(e.bodyClass),n.leave($).then(function(){if($){y.resolve(o),d.$destroy();for(var e=0;e<r.openModals.length;e++)if(r.openModals[e].modal===f){r.openModals.splice(e,1);break}h.close=null,p=null,g=null,f=null,h=null,$=null,d=null}}),m&&m()}angular.isString(e.appendElement)?O=angular.element(o[0].querySelector(e.appendElement)):e.appendElement&&(O=e.appendElement),function(e,o){var t=e.children();t.length>0?n.enter(o,e,t[t.length-1]):n.enter(o,e)}(O,$),e.bodyClass&&i[0].classList.add(e.bodyClass),f.controller=S,f.scope=d,f.element=$,f.close=g.promise,f.closed=y.promise,p.resolve(f),document.activeElement.blur(),r.openModals.push({modal:f,close:h.close})}).then(null,function(e){p.reject(e)}),p.promise):(p.reject("No controller has been specified."),p.promise)}}(e)}]})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,